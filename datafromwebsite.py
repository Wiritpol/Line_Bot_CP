from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
import time
import requests

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ URL ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
def url_exists(url):
    try:
        response = requests.head(url, timeout=5)
        return response.status_code < 400
    except:
        return False

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Chrome
chrome_options = Options()
chrome_options.add_argument('--disable-blink-features=AutomationControlled')
chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
chrome_options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')

driver = webdriver.Chrome(options=chrome_options)

def get_product_details(product_url):
    """‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"""
    try:
        # ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà
        driver.execute_script("window.open('');")
        driver.switch_to.window(driver.window_handles[-1])
        driver.get(product_url)
        time.sleep(2)

        details = {}

        # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
        try:
            desc_elem = driver.find_element(By.CSS_SELECTOR, ".product-description, .description, [class*=desc]")
            details['description'] = desc_elem.text.strip()
        except:
            details['description'] = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢'

        # ‡∏£‡∏≤‡∏Ñ‡∏≤
        try:
            price_elem = driver.find_element(By.CSS_SELECTOR, ".price, .product-price, [class*=price]")
            details['price'] = price_elem.text.strip()
        except:
            details['price'] = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤'

        # ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
        driver.close()
        driver.switch_to.window(driver.window_handles[0])

        return details

    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {e}")
        driver.close()
        driver.switch_to.window(driver.window_handles[0])
        return {'description': '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', 'price': ''}


def scrape_page(url, page_num):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏ô‡∏∂‡πà‡∏á - ‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠, ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û, ‡∏•‡∏¥‡∏á‡∏Å‡πå ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô"""
    print(f"\nüìÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ {page_num}: {url}")
    
    try:
        driver.get(url)
        time.sleep(3)  # ‡∏£‡∏≠‡πÇ‡∏´‡∏•‡∏î

        products_data = []

        # ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        containers = driver.find_elements(By.CSS_SELECTOR, ".product, .item, .card, .product-item, div[class*='product']")
        print(f"üîç ‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(containers)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

        for idx, container in enumerate(containers, 1):
            try:
                product_name = ""
                image_url = ""
                product_link = ""

                # ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                name_selectors = ["h1", "h2", "h3", "h4", "h5", ".product-name", ".item-name", ".title", ".name"]
                for sel in name_selectors:
                    try:
                        name_elem = container.find_element(By.CSS_SELECTOR, sel)
                        if name_elem.text.strip():
                            product_name = name_elem.text.strip()
                            break
                    except:
                        continue

                # ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                try:
                    img_elem = container.find_element(By.TAG_NAME, "img")
                    image_url = img_elem.get_attribute("src") or img_elem.get_attribute("data-src")
                except:
                    image_url = ""

                # ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                try:
                    link_elem = container.find_element(By.CSS_SELECTOR, "a")
                    product_link = link_elem.get_attribute("href")
                except:
                    product_link = ""

                if not product_name or len(product_name) < 4:
                    continue

                # üß† ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà
                details = get_product_details(product_link) if product_link else {'description': '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏¥‡∏á‡∏Å‡πå', 'price': ''}

                product_data = {
                    'name': product_name,
                    'image': image_url if image_url else '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û',
                    'price': details['price'],
                    'description': details['description'],
                    'url': product_link,
                    'source': f'‡∏´‡∏ô‡πâ‡∏≤ {page_num}'
                }

                products_data.append(product_data)
                print(f"‚úÖ [{idx}] {product_name[:50]}...")

            except Exception as e:
                print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà {idx}: {e}")
                continue

        return products_data

    except Exception as e:
        print(f"‚ùå Error scraping page {page_num}: {e}")
        return []



try:
    base_url = "https://shop.cpbrandsite.com/th/category/133840/all-product"
    all_products_data = []
    
    # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏•‡∏≠‡∏á URL patterns ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    url_patterns = [
        f"{base_url}?page={{}}",
        f"{base_url}?p={{}}",
        f"{base_url}/page/{{}}",
        f"{base_url}#page={{}}",
    ]
    
    successful_pattern = None
    
    for pattern in url_patterns:
        test_url = pattern.format(2)  # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ 2
        print(f"‡∏ó‡∏î‡∏™‡∏≠‡∏ö URL pattern: {test_url}")
        
        if url_exists(test_url):
            successful_pattern = pattern
            print(f"‡∏û‡∏ö pattern ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ: {pattern}")
            break
    
    if successful_pattern:
        # ‡πÉ‡∏ä‡πâ URL pattern ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
        for page in range(1, 3):  # ‡∏•‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏´‡∏ô‡πâ‡∏≤
            url = successful_pattern.format(page)
            page_products = scrape_page(url, page)
            
            if page_products:
                all_products_data.extend(page_products)
                print(f"‡∏´‡∏ô‡πâ‡∏≤ {page}: ‡∏û‡∏ö {len(page_products)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 2 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
                for i, product in enumerate(page_products[:2], 1):
                    print(f"  {i}. {product['name'][:50]}...")
            else:
                print(f"‡∏´‡∏ô‡πâ‡∏≤ {page}: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà")
                if page > 2:  # ‡∏ñ‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ 3+ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î
                    break
    
    else:
        # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° next
        print("‡πÑ‡∏°‡πà‡∏û‡∏ö URL pattern ‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° next")
        
        driver.get(base_url)
        time.sleep(5)
        
        page_num = 1
        while page_num <= 3:
            print(f"\n=== ‡∏´‡∏ô‡πâ‡∏≤ {page_num} ===")
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_products = []
            
            # ‡∏´‡∏≤ product containers
            containers = driver.find_elements(By.CSS_SELECTOR, ".product, .item, .card, div[class*='product']")
            
            for container in containers:
                product_data = {}
                
                # ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                try:
                    name_elem = container.find_element(By.CSS_SELECTOR, "h1, h2, h3, h4, .title, .name, .product-name")
                    product_name = name_elem.text.strip()
                except:
                    product_name = ""
                
                # ‡∏´‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                try:
                    img_elem = container.find_element(By.TAG_NAME, "img")
                    img_src = img_elem.get_attribute('src') or img_elem.get_attribute('data-src')
                except:
                    img_src = ""
                
                if product_name:
                    product_data = {
                        'name': product_name,
                        'image': img_src if img_src else '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û',
                    }
                    current_products.append(product_data)
            
            if current_products:
                all_products_data.extend(current_products)
                print(f"‡∏û‡∏ö {len(current_products)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            
            # ‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° next
            next_found = False
            next_selectors = [
                "//button[contains(text(), '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ')]",
                "//a[contains(text(), '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ')]", 
                "//button[contains(text(), 'Next')]",
                "//a[contains(text(), 'Next')]",
                "//button[contains(text(), '>>')]",
                "//a[contains(text(), '>>')]",
                "//*[contains(@class, 'next')]",
                "//*[contains(@class, 'pagination-next')]"
            ]
            
            for selector in next_selectors:
                try:
                    next_btn = driver.find_element(By.XPATH, selector)
                    if next_btn.is_enabled():
                        driver.execute_script("arguments[0].click();", next_btn)
                        time.sleep(3)
                        next_found = True
                        break
                except:
                    continue
            
            if not next_found:
                print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏∏‡πà‡∏° next")
                break
                
            page_num += 1
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
    print(f"\n{'='*50}")
    print(f"‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    print(f"{'='*50}")
    print(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(all_products_data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    if all_products_data:
        print(f"\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:")
        for i, product in enumerate(all_products_data[:3], 1):
            print(f"{i:2d}. {product['name'][:60]}...")
            print(f"     ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {product['image'][:80]}...")
            print()
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå format ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
        with open('cp_products_with_images.txt', 'w', encoding='utf-8') as f:
            f.write("=" * 60 + "\n")
            f.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå CP Brand\n")
            f.write(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(all_products_data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n")
            f.write("=" * 60 + "\n\n")
            
            for i, product in enumerate(all_products_data, 1):
                f.write(f"‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà {i}\n")
                f.write(f"‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {product['name']}\n")
                f.write(f"‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {product['image']}\n")
                f.write("-" * 40 + "\n\n")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö CSV ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Excel
        with open('cp_products.csv', 'w', encoding='utf-8') as f:
            f.write("‡∏•‡∏≥‡∏î‡∏±‡∏ö,‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤,‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û\n")
            for i, product in enumerate(all_products_data, 1):
                # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CSV
                name = product['name'].replace(',', ';').replace('\n', ' ')
                image = product['image'].replace(',', ';')
                f.write(f"{i},{name},{image}\n")
        
        # CSV
        with open('cp_products_detailed.csv', 'w', encoding='utf-8') as f:
            f.write("‡∏•‡∏≥‡∏î‡∏±‡∏ö,‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤,‡∏£‡∏≤‡∏Ñ‡∏≤,‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢,‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û,‡∏•‡∏¥‡∏á‡∏Å‡πå\n")
            for i, product in enumerate(all_products_data, 1):
                name = product['name'].replace(',', ';')
                price = product.get('price', '').replace(',', ';')
                desc = product.get('description', '').replace(',', ';').replace('\n', ' ')
                image = product['image'].replace(',', ';')
                url = product.get('url', '')
                f.write(f"{i},{name},{price},{desc},{image},{url}\n")

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        image_urls = [p['image'] for p in all_products_data if p['image'] != '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û']
        with open('image_urls.txt', 'w', encoding='utf-8') as f:
            for url in image_urls:
                f.write(f"{url}\n")
        
        print(f"\n‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß:")
        print(f"   üìÑ cp_products_with_images.txt - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
        print(f"   üìä cp_products.csv - ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö CSV ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Excel")
        print(f"   üñºÔ∏è  image_urls.txt - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ({len(image_urls)} ‡∏£‡∏π‡∏õ)")
        
    else:
        print("\n‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
        print("‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
        print("1. ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ login ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
        print("2. ‡∏°‡∏µ CAPTCHA ‡∏´‡∏£‡∏∑‡∏≠ bot protection ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà") 
        print("3. ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå")
        
        # Debug info
        print(f"\nPage Title: {driver.title}")
        print(f"Current URL: {driver.current_url}")
        
        # ‡∏î‡∏π‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        all_images = driver.find_elements(By.TAG_NAME, "img")
        print(f"‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(all_images)} ‡∏£‡∏π‡∏õ")
        for i, img in enumerate(all_images[:5], 1):
            src = img.get_attribute('src')
            print(f"  {i}. {src}")

except Exception as e:
    print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    import traceback
    traceback.print_exc()

finally:
    driver.quit()
    print("\nüèÅ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")